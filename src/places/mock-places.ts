import { PlaceDocument } from "src/schemas/place.schema";
import { Types } from "mongoose";

export const mockPlaces: PlaceDocument[] = [
  {
    _id: new Types.ObjectId("65275a5e3620e67160ad3651"),
    name: "Wat Arun",
    imageUrl: "https://example.com/watarun.jpg",
    location: [100.4891, 13.7450],
    description: "A Buddhist temple in Bangkok Yai district of Bangkok, Thailand.",
    providerId: new Types.ObjectId("65275a5e3620e67160ad3001"),
    tags: ["temple", "culture", "landmark"],
    type: "attraction",
    __v: 0,
    save: () => Promise.resolve(this as any),
    $isNew: false,
    $isEmpty: false,
    collection: {} as any,
    isDirectModified: () => false,
    isModified: () => false,
    isDeleted: () => false,
    isInit: () => true,
    isSelected: () => true,
    get: () => null,
    set: () => this,
    markModified: () => {},
    inc: () => this,
    populate: () => Promise.resolve(this as any),
    $getPopulatedDocs: () => [],
    equals: () => false,
    inspect: () => ({}),
    toJSON: () => ({
      _id: new Types.ObjectId("65275a5e3620e67160ad3651"),
      name: "Wat Arun",
      imageUrl: "https://example.com/watarun.jpg",
      location: [100.4891, 13.7450],
      description: "A Buddhist temple in Bangkok Yai district of Bangkok, Thailand.",
      providerId: new Types.ObjectId("65275a5e3620e67160ad3001"),
      tags: ["temple", "culture", "landmark"],
      type: "attraction",
    }),
    toObject: () => ({}),
  } as any,
  {
    _id: new Types.ObjectId("65275a5e3620e67160ad3652"),
    name: "Grand Palace",
    imageUrl: "https://example.com/grandpalace.jpg",
    location: [100.4937, 13.7500],
    description: "A complex of buildings at the heart of Bangkok, Thailand.",
    providerId: new Types.ObjectId("65275a5e3620e67160ad3001"),
    tags: ["palace", "culture", "landmark", "history"],
    type: "attraction",
    __v: 0,
    save: () => Promise.resolve(this as any),
    $isNew: false,
    $isEmpty: false,
    collection: {} as any,
    isDirectModified: () => false,
    isModified: () => false,
    isDeleted: () => false,
    isInit: () => true,
    isSelected: () => true,
    get: () => null,
    set: () => this,
    markModified: () => {},
    inc: () => this,
    populate: () => Promise.resolve(this as any),
    $getPopulatedDocs: () => [],
    equals: () => false,
    inspect: () => ({}),
    toJSON: () => ({
      _id: new Types.ObjectId("65275a5e3620e67160ad3652"),
      name: "Grand Palace",
      imageUrl: "https://example.com/grandpalace.jpg",
      location: [100.4937, 13.7500],
      description: "A complex of buildings at the heart of Bangkok, Thailand.",
      providerId: new Types.ObjectId("65275a5e3620e67160ad3001"),
      tags: ["palace", "culture", "landmark", "history"],
      type: "attraction",
    }),
    toObject: () => ({}),
  } as any,
  {
    _id: new Types.ObjectId("65275a5e3620e67160ad3653"),
    name: "Terminal 21",
    imageUrl: "https://example.com/terminal21.jpg",
    location: [100.5605, 13.7371],
    description: "A popular shopping mall in Bangkok.",
    providerId: new Types.ObjectId("65275a5e3620e67160ad3001"),
    tags: ["shopping", "mall", "modern"],
    type: "attraction",
    __v: 0,
    save: () => Promise.resolve(this as any),
    $isNew: false,
    $isEmpty: false,
    collection: {} as any,
    isDirectModified: () => false,
    isModified: () => false,
    isDeleted: () => false,
    isInit: () => true,
    isSelected: () => true,
    get: () => null,
    set: () => this,
    markModified: () => {},
    inc: () => this,
    populate: () => Promise.resolve(this as any),
    $getPopulatedDocs: () => [],
    equals: () => false,
    inspect: () => ({}),
    toJSON: () => ({
      _id: new Types.ObjectId("65275a5e3620e67160ad3653"),
      name: "Terminal 21",
      imageUrl: "https://example.com/terminal21.jpg",
      location: [100.5605, 13.7371],
      description: "A popular shopping mall in Bangkok.",
      providerId: new Types.ObjectId("65275a5e3620e67160ad3001"),
      tags: ["shopping", "mall", "modern"],
      type: "attraction",
    }),
    toObject: () => ({}),
  } as any,
  {
    _id: new Types.ObjectId("65275a5e3620e67160ad3654"),
    name: "Erawan Museum",
    imageUrl: "https://example.com/erawan.jpg",
    location: [100.6067, 13.6267],
    description: "A museum in Samut Prakan, Thailand, known for its giant three-headed elephant statue.",
    providerId: new Types.ObjectId("65275a5e3620e67160ad3001"),
    tags: ["museum", "culture", "landmark"],
    type: "attraction",
    __v: 0,
    save: () => Promise.resolve(this as any),
    $isNew: false,
    $isEmpty: false,
    collection: {} as any,
    isDirectModified: () => false,
    isModified: () => false,
    isDeleted: () => false,
    isInit: () => true,
    isSelected: () => true,
    get: () => null,
    set: () => this,
    markModified: () => {},
    inc: () => this,
    populate: () => Promise.resolve(this as any),
    $getPopulatedDocs: () => [],
    equals: () => false,
    inspect: () => ({}),
    toJSON: () => ({
      _id: new Types.ObjectId("65275a5e3620e67160ad3654"),
      name: "Erawan Museum",
      imageUrl: "https://example.com/erawan.jpg",
      location: [100.6067, 13.6267],
      description: "A museum in Samut Prakan, Thailand, known for its giant three-headed elephant statue.",
      providerId: new Types.ObjectId("65275a5e3620e67160ad3001"),
      tags: ["museum", "culture", "landmark"],
      type: "attraction",
    }),
    toObject: () => ({}),
  } as any,
  {
    _id: new Types.ObjectId("65275a5e3620e67160ad3655"),
    name: "Chatuchak Weekend Market",
    imageUrl: "https://example.com/chatuchak.jpg",
    location: [100.5501, 13.8029],
    description: "One of the largest markets in Thailand.",
    providerId: new Types.ObjectId("65275a5e3620e67160ad3001"),
    tags: ["market", "shopping"],
    type: "attraction",
    __v: 0,
    save: () => Promise.resolve(this as any),
    $isNew: false,
    $isEmpty: false,
    collection: {} as any,
    isDirectModified: () => false,
    isModified: () => false,
    isDeleted: () => false,
    isInit: () => true,
    isSelected: () => true,
    get: () => null,
    set: () => this,
    markModified: () => {},
    inc: () => this,
    populate: () => Promise.resolve(this as any),
    $getPopulatedDocs: () => [],
    equals: () => false,
    inspect: () => ({}),
    toJSON: () => ({
      _id: new Types.ObjectId("65275a5e3620e67160ad3655"),
      name: "Chatuchak Weekend Market",
      imageUrl: "https://example.com/chatuchak.jpg",
      location: [100.5501, 13.8029],
      description: "One of the largest markets in Thailand.",
      providerId: new Types.ObjectId("65275a5e3620e67160ad3001"),
      tags: ["market", "shopping"],
      type: "attraction",
    }),
    toObject: () => ({}),
  } as any,
  {
    _id: new Types.ObjectId("65275a5e3620e67160ad3656"),
    name: "Siam Paragon",
    imageUrl: "https://example.com/siamparagon.jpg",
    location: [100.5347, 13.7466],
    description: "A large shopping mall in Bangkok.",
    providerId: new Types.ObjectId("65275a5e3620e67160ad3001"),
    tags: ["shopping", "mall", "luxury"],
    type: "attraction",
    __v: 0,
    save: () => Promise.resolve(this as any),
    $isNew: false,
    $isEmpty: false,
    collection: {} as any,
    isDirectModified: () => false,
    isModified: () => false,
    isDeleted: () => false,
    isInit: () => true,
    isSelected: () => true,
    get: () => null,
    set: () => this,
    markModified: () => {},
    inc: () => this,
    populate: () => Promise.resolve(this as any),
    $getPopulatedDocs: () => [],
    equals: () => false,
    inspect: () => ({}),
    toJSON: () => ({
      _id: new Types.ObjectId("65275a5e3620e67160ad3656"),
      name: "Siam Paragon",
      imageUrl: "https://example.com/siamparagon.jpg",
      location: [100.5347, 13.7466],
      description: "A large shopping mall in Bangkok.",
      providerId: new Types.ObjectId("65275a5e3620e67160ad3001"),
      tags: ["shopping", "mall", "luxury"],
      type: "attraction",
    }),
    toObject: () => ({}),
  } as any,
  {
    _id: new Types.ObjectId("65275a5e3620e67160ad3657"),
    name: "Vertigo and Moon Bar",
    imageUrl: "https://example.com/vertigo.jpg",
    location: [100.5404, 13.7235],
    description: "Rooftop bar with panoramic city views, perfect for a romantic evening.",
    providerId: new Types.ObjectId("65275a5e3620e67160ad3001"),
    tags: ["bar", "rooftop", "romantic", "couple", "dining"],
    type: "restaurant",
    __v: 0,
    save: () => Promise.resolve(this as any),
    $isNew: false,
    $isEmpty: false,
    collection: {} as any,
    isDirectModified: () => false,
    isModified: () => false,
    isDeleted: () => false,
    isInit: () => true,
    isSelected: () => true,
    get: () => null,
    set: () => this,
    markModified: () => {},
    inc: () => this,
    populate: () => Promise.resolve(this as any),
    $getPopulatedDocs: () => [],
    equals: () => false,
    inspect: () => ({}),
    toJSON: () => ({}),
    toObject: () => ({}),
  } as any,
  {
    _id: new Types.ObjectId("65275a5e3620e67160ad3658"),
    name: "Oasis Spa (Sukhumvit 31)",
    imageUrl: "https://example.com/oasisspa.jpg",
    location: [100.5682, 13.7389],
    description: "A tranquil and luxurious day spa, ideal for a relaxing couple's massage.",
    providerId: new Types.ObjectId("65275a5e3620e67160ad3001"),
    tags: ["spa", "relax", "couple", "wellness"],
    type: "attraction",
    __v: 0,
    save: () => Promise.resolve(this as any),
    $isNew: false,
    $isEmpty: false,
    collection: {} as any,
    isDirectModified: () => false,
    isModified: () => false,
    isDeleted: () => false,
    isInit: () => true,
    isSelected: () => true,
    get: () => null,
    set: () => this,
    markModified: () => {},
    inc: () => this,
    populate: () => Promise.resolve(this as any),
    $getPopulatedDocs: () => [],
    equals: () => false,
    inspect: () => ({}),
    toJSON: () => ({}),
    toObject: () => ({}),
  } as any
];